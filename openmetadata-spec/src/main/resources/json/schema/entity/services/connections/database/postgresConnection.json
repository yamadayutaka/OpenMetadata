{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/postgresConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PostgresConnection",
  "description": "Postgres Database Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.PostgresConnection",
  "definitions": {
    "postgresType": {
      "description": "Service type.",
      "type": "string",
      "enum": ["Postgres"],
      "default": "Postgres"
    },
    "postgresScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": ["postgresql+psycopg2"],
      "default": "postgresql+psycopg2"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/postgresType",
      "default": "Postgres"
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "$ref": "#/definitions/postgresScheme",
      "default": "postgresql+psycopg2"
    },
    "configSource": {
      "title": "Postgres Configuration Source",
      "description": "Config source to connect postgres instance",
      "oneOf": [
        {
          "$ref": "common/commonConfig.json"
        },
        {
          "$ref": "common/iamAuthConfig.json"
        }
      ]
    },
    "sslMode": {
      "title": "SSL Mode",
      "description": "SSL Mode to connect to postgres database.",
      "enum": ["disable", "allow", "prefer", "require", "verify-ca", "verify-full"],
      "default": "disable"
    },
    "sslConfig": {
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/sslConfig"
    },
    "classificationName": {
      "title": "Classification Name",
      "description": "Custom OpenMetadata Classification name for Postgres policy tags.",
      "type": "string",
      "default": "PostgresPolicyTags"
    },
    "ingestAllDatabases": {
      "title": "Ingest All Databases",
      "description": "Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.",
      "type": "boolean",
      "default": false
    },
    "connectionOptions": {
      "title": "Connection Options",
      "$ref": "../connectionBasicType.json#/definitions/connectionOptions"
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "$ref": "../connectionBasicType.json#/definitions/connectionArguments"
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
    },
    "supportsUsageExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsUsageExtraction"
    },
    "supportsLineageExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsLineageExtraction"
    },
    "supportsDBTExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsDBTExtraction"
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "$ref": "../connectionBasicType.json#/definitions/supportsProfiler"
    },
    "supportsDatabase": {
      "title": "Supports Database",
      "$ref": "../connectionBasicType.json#/definitions/supportsDatabase"
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "$ref": "../connectionBasicType.json#/definitions/supportsQueryComment"
    }
  },
  "additionalProperties": false
}
